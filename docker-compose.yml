version: '3.8'

services:
  web:
    build: .
    command: >
      sh -c "python manage.py makemigrations sensores --noinput &&
             python manage.py migrate --noinput &&
             python _superuser.py &&
             daphne -b 0.0.0.0 -p 8000 sensores_project.asgi:application"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: unless-stopped

  consumer:
    build: .
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - .:/app
    command: >
      sh -c "sleep 60 &&
             python _consumer.py"
    restart: unless-stopped

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12.0-management
    ports:
      - "5672:5672" 
      - "15672:15672" 
      - "1883:1883"   
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/rabbitmq.sh:/rabbitmq.sh
    entrypoint: sh -c "rabbitmq-server & sleep 10 && chmod +x /rabbitmq.sh && /rabbitmq.sh"
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data: